package lojaunit.andrea.accessingdatapostgres.controller;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import lojaunit.andrea.accessingdatapostgres.model.ItensVenda;
import lojaunit.andrea.accessingdatapostgres.repository.ItensVendaRepository;

@Controller // This means that this class is a Controller
@RequestMapping(path="/itensvenda") // This means URL's start with /demo (after Application path)
public class ItensVendaController {
	@Autowired // This means to get the bean called userRepository
	         // Which is auto-generated by Spring, we will use it to handle the data
	private ItensVendaRepository itensVendaRepository;


	  @PostMapping(path="/add") // Map ONLY POST Requests
	  public @ResponseBody String addNewItensVeenda (@RequestParam Integer quantidade, double valorUnitario){
		  
	    // @ResponseBody means the returned String is the response, not a view name
	    // @RequestParam means it is a parameter from the GET or POST request

	    ItensVenda n = new ItensVenda();
	    n.setQuantidade(quantidade);
	    n.setValorUnitario(valorUnitario);
	    	    
	    itensVendaRepository.save(n);
	    return "Salvo";
	        
	  }

	  @GetMapping(path="/all")
	  public @ResponseBody Iterable<ItensVenda> getAllItensVenda() {
	    // This returns a JSON or XML with the users
	    return itensVendaRepository.findAll();
	  }
	  @GetMapping(path="/find/{id}")
	  public @ResponseBody Optional<ItensVenda> findById(@RequestParam Integer idItensVenda) {
	    // This returns a JSON or XML with this user
	    return itensVendaRepository.findById(idItensVenda);
	  }
	  @DeleteMapping(path="/delete/{id}")
	  public @ResponseBody String deleteById(@RequestParam Integer idItensVenda) {
	    // This returns a JSON or XML with this user
		  
		  if (itensVendaRepository.findById(idItensVenda) == null) {
			  return "Não encontrado";
		  }
		  itensVendaRepository.deleteById(idItensVenda);
		  return "Removido";
		  }
	  @PutMapping(path="/update/{id}")
	  public @ResponseBody String PutById(@PathVariable (value="id") Integer ItensVenda, @RequestParam Integer idItensVenda, Integer quantidade, double valorUnitario) {
	    // This returns a JSON or XML with this user
		  
		  if (itensVendaRepository.findById(idItensVenda) == null) {
			  return "Não encontrado";
		  }
		  
		  ItensVenda n = new ItensVenda();
		    n.setQuantidade(quantidade);
		    n.setValorUnitario(valorUnitario);
		    	    
		    itensVendaRepository.save(n);
		    return "Salvo";
	  }
	}
