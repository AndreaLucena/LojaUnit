package lojaunit.andrea.accessingdatapostgres.controller;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import lojaunit.andrea.accessingdatapostgres.model.FormaPagamento;
import lojaunit.andrea.accessingdatapostgres.repository.FormaPagamentoRepository;

@Controller // This means that this class is a Controller
@RequestMapping(path="/formaPagamento") // This means URL's start with /demo (after Application path)
public class FormaPagamentoController {
	
	@Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
	private FormaPagamentoRepository formaPagamentoRepository;
	
@PostMapping(path="/add") // Map ONLY POST Requests
	  public @ResponseBody String addNewFormaPagamento (@RequestParam String forma, String descricao, Integer ativo) {
		  
	    // @ResponseBody means the returned String is the response, not a view name
	    // @RequestParam means it is a parameter from the GET or POST request

	    FormaPagamento n = new FormaPagamento();
	    n.setForma(forma);
	    n.setDescricao(descricao);
	    n.setAtivo(ativo);
	      
	    
	    formaPagamentoRepository.save(n);
	    return "Salvo";
	        
	  }

	  @GetMapping(path="/all")
	  public @ResponseBody Iterable<FormaPagamento> getAllFormaPagamento() {
	    // This returns a JSON or XML with the users
	    return formaPagamentoRepository.findAll();
	  }
	  @GetMapping(path="/find/{id}")
	  public @ResponseBody Optional<FormaPagamento> findById(@RequestParam Integer idFormaPagamento) {
	    // This returns a JSON or XML with this user
	    return formaPagamentoRepository.findById(idFormaPagamento);
	  }
	  @DeleteMapping(path="/delete/{id}")
	  public @ResponseBody String deleteById(@RequestParam Integer idFormaPagamento) {
	    // This returns a JSON or XML with this user
		  
		  if (formaPagamentoRepository.findById(idFormaPagamento) == null) {
			  return "Não encontrado";
		  }
		  formaPagamentoRepository.deleteById(idFormaPagamento);
		  return "Removido";
		  }
	  @PutMapping(path="/update/{id}")
	  public @ResponseBody String PutById(@PathVariable (value="id") Integer FormaPagamento, @RequestParam Integer idFormaPagamento, String forma, String descricao, Integer ativo) {
		  
		  if (formaPagamentoRepository.findById(idFormaPagamento) == null) {
			  return "Não encontrado";
		  }
		  
		  FormaPagamento n = new FormaPagamento();
		    n.setForma(forma);
		    n.setDescricao(descricao);
		    n.setAtivo(ativo);
		      
		    
		    formaPagamentoRepository.save(n);
		    return "Salvo";
	  }
	}
