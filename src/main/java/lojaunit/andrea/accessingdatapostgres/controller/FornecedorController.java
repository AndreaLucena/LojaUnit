package lojaunit.andrea.accessingdatapostgres.controller;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;

import lojaunit.andrea.accessingdatapostgres.model.Fornecedor;
import lojaunit.andrea.accessingdatapostgres.repository.FornecedorRepository;

@Controller // This means that this class is a Controller
@RequestMapping(path="/fornecedor") // This means URL's start with /demo (after Application path)
public class FornecedorController {
	 @Autowired // This means to get the bean called userRepository
     // Which is auto-generated by Spring, we will use it to handle the data
	 private FornecedorRepository fornecedorRepository;


@PostMapping(path="/add") // Map ONLY POST Requests
public @ResponseBody String addNewFornecedor (@RequestParam String nome, String email, Integer cnpj, Integer telefone, String endereco) {
// @ResponseBody means the returned String is the response, not a view name
// @RequestParam means it is a parameter from the GET or POST request

	Fornecedor n = new Fornecedor();
	n.setNome(nome);
	n.setEndereco(endereco);
	n.setTelefone(telefone);
	n.setCnpj(cnpj);
	n.setEmail(email);
	
	fornecedorRepository.save(n);
	return "Salvo";

}
@GetMapping(path="/all")
public @ResponseBody Iterable<Fornecedor> getAllFornecedores() {
  // This returns a JSON or XML with the users
  return fornecedorRepository.findAll();
}
@GetMapping(path="/find/{id}")
public @ResponseBody Optional<Fornecedor> findById(@RequestParam Integer idFornecedor) {
  // This returns a JSON or XML with this user
  return fornecedorRepository.findById(idFornecedor);
}
@DeleteMapping(path="/delete/{id}")
@ResponseStatus(code = HttpStatus.ACCEPTED)
public @ResponseBody String deleteById(@PathVariable Integer id) {
  // This returns a JSON or XML with this user
	  
	  if (fornecedorRepository.findById(id) == null) {
		  return "Não encontrado";
	  }
	  fornecedorRepository.deleteById(id);
	  return "Removido";
	  }
@PutMapping(path="/update/{id}")
public @ResponseBody String PutById(@PathVariable Integer id, String nome, String email, Integer cnpj, Integer telefone, String endereco) {
  // This returns a JSON or XML with this user
	  
	  if (fornecedorRepository.findById(id) == null) {
		  return "Não encontrado";
	  }
	  
	  Fornecedor n = new Fornecedor();
		n.setNome(nome);
		n.setEndereco(endereco);
		n.setTelefone(telefone);
		n.setCnpj(cnpj);
		n.setEmail(email);
		
		fornecedorRepository.save(n);
		return "Salvo";

}
}

